Golang

-> Linguagem da google
-> Alta performance
-> Rápida compilação
-> golang.org

-> sudo tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz
-> export PATH=$PATH:/usr/local/go/bin

-> mkdir pkg src bin

- pkg -> pacotes compartilhados entre as aplicações
- src -> código fonte
- bin -> arquivos binários compilados

go build hello
./hello
go run hello

var nome string = "Carol"
nome := "Carol"

fmt.Println("Hello World, ", nome)

tipos:
    - string
    - int
    - float32 float64

"reflect" -> reflect.TypeOf(nome))

fmt.Scanf("%d", &comando)
fmt.Scan(&comando)

& endereço de memória

if comando == 1 {

} else if comando == 2 {

} else {

}

switch comando {
	case 1:
		fmt.Println("Monitoramento...")
	default:
		fmt.Println("Comando não reconhecido.")
}

os -> pacote que se comunica com o sistema operacional
os.Exit(0) -> Encerrando o programa com segurança
os.Exit(-1) -> Ocorreu um erro na execução

"net/http" -> Pacote que facilita a comunicação com a internet

resp, _ := http.Get(site)
linha cima retorna a respostam o status do site que se passa no parametro
_ usa quando vc não vai utilizar algum dos parametros se uma funcao retorna mais de um valor